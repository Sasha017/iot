#include <iostream>
#include <math.h>
#include <conio.h>
#define _USE_MATH_DEFINES

#define n 5
#define m 5

using namespace std;

class Matrix
{
private:
  double dArr[m];
public:
  friend void InputArray(Matrix Arr[]);
  friend void OutputArray(Matrix Arr[]);
  friend void SortArray(Matrix  Arr[]);
  friend void CalcArray(Matrix Arr[]);
};

void InputArray(Matrix  Arr[])
{
  for (int i = 0; i < n; ++i)
    for (int j = 0; j < m; ++j)
    {
      cout << "[" << i + 1 << "][" << j + 1 << "] = ";
      cin >> Arr[i].dArr[j];
    }
}
void OutputArray(Matrix  Arr[])
{
  for (int i = 0; i < n; ++i)
  {
    for (int j = 0; j < m; ++j)
    {
      cout << Arr[i].dArr[j] << "\t";
    }
    cout << endl;
  }
}
void SortArray(Matrix  arr[])
{
  for (int i = 0; i < n; i++)
  {
    for (int BlockSizeIterator = 1; BlockSizeIterator < n; BlockSizeIterator *= 2)
    {
      for (int BlockIterator = 0; BlockIterator < n - BlockSizeIterator; BlockIterator += 2 * BlockSizeIterator)
      {
        int LeftBlockIterator = 0;
        int RightBlockIterator = 0;
        int LeftBorder = BlockIterator;
        int MidBorder = BlockIterator + BlockSizeIterator;
        int RightBorder = BlockIterator + 2 * BlockSizeIterator;
        RightBorder = (RightBorder < n) ? RightBorder : n;
        int* SortedBlock = new int[RightBorder - LeftBorder];

        while (LeftBorder + LeftBlockIterator < MidBorder && MidBorder + RightBlockIterator < RightBorder)
        {
          if (arr[i].dArr[LeftBorder + LeftBlockIterator] < arr[i].dArr[MidBorder + RightBlockIterator])
          {
            SortedBlock[LeftBlockIterator + RightBlockIterator] = arr[i].dArr[LeftBorder + LeftBlockIterator];
            LeftBlockIterator++;
          }
          else
          {
            SortedBlock[LeftBlockIterator + RightBlockIterator] = arr[i].dArr[MidBorder + RightBlockIterator];
            RightBlockIterator++;
          }
        }
        while (LeftBorder + LeftBlockIterator < MidBorder)
        {
          SortedBlock[LeftBlockIterator + RightBlockIterator] = arr[i].dArr[LeftBorder + LeftBlockIterator];
          LeftBlockIterator++;
        }
        while (MidBorder + RightBlockIterator < RightBorder)
        {
          SortedBlock[LeftBlockIterator + RightBlockIterator] = arr[i].dArr[MidBorder + RightBlockIterator];
          RightBlockIterator++;
        }

        for (int MergeIterator = 0; MergeIterator < LeftBlockIterator + RightBlockIterator; MergeIterator++)
        {
          arr[i].dArr[LeftBorder + MergeIterator] = SortedBlock[MergeIterator];
        }
        delete SortedBlock;

      }

    }
  }
}


void CalcArray(Matrix Arr[]) {
  double sum = 0;
  double haunt = 1.0;
  for (int j = 0; j < n-1; j++) {
    sum = 0;
    for (int i = 0; i < n - j - 1; i++) {
      sum += (Arr[i].dArr[j]);
    }
    sum = sum / (n - j - 1);
    haunt *= sum;
    cout << "f(" << j+1 << "): " << sum << endl;
  }
  cout << "F(f(ij)): " << haunt << endl;
}


int main()
{
  Matrix  Array[n];
  cout << "Enter elements of matrix:\n" << endl;
  InputArray(Array);
  cout << "\nYour matrix:\n" << endl;
  OutputArray(Array);
  SortArray(Array);
  cout << "\nSorted matrix:\n" << endl;
  OutputArray(Array);
  cout << "\nCalculations:\n" << endl;
  CalcArray(Array);
}